// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/VSE.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// benchmark
void benchmark(const Eigen::SparseMatrix<int>& x, const Eigen::Matrix<double, -1, -1>& y, size_t n_reps);
RcppExport SEXP _VSE_benchmark(SEXP xSEXP, SEXP ySEXP, SEXP n_repsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<int>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, -1>& >::type y(ySEXP);
    Rcpp::traits::input_parameter< size_t >::type n_reps(n_repsSEXP);
    benchmark(x, y, n_reps);
    return R_NilValue;
END_RCPP
}
// colsums
Eigen::Matrix<int, -1, -1> colsums(const Eigen::SparseMatrix<int>& A, std::string encoding);
RcppExport SEXP _VSE_colsums(SEXP ASEXP, SEXP encodingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<int>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< std::string >::type encoding(encodingSEXP);
    rcpp_result_gen = Rcpp::wrap(colsums(A, encoding));
    return rcpp_result_gen;
END_RCPP
}
// c_inspect
Rcpp::List c_inspect(const Eigen::SparseMatrix<int>& A, std::string encoding);
RcppExport SEXP _VSE_c_inspect(SEXP ASEXP, SEXP encodingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<int>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< std::string >::type encoding(encodingSEXP);
    rcpp_result_gen = Rcpp::wrap(c_inspect(A, encoding));
    return rcpp_result_gen;
END_RCPP
}
// memuse
size_t memuse(const Eigen::SparseMatrix<short int>& A, std::string encoding);
RcppExport SEXP _VSE_memuse(SEXP ASEXP, SEXP encodingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<short int>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< std::string >::type encoding(encodingSEXP);
    rcpp_result_gen = Rcpp::wrap(memuse(A, encoding));
    return rcpp_result_gen;
END_RCPP
}
// tcrossprod
Eigen::Matrix<double, -1, -1> tcrossprod(const Eigen::SparseMatrix<int>& x, const Eigen::Matrix<double, -1, -1>& y, std::string encoding);
RcppExport SEXP _VSE_tcrossprod(SEXP xSEXP, SEXP ySEXP, SEXP encodingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<int>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double, -1, -1>& >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::string >::type encoding(encodingSEXP);
    rcpp_result_gen = Rcpp::wrap(tcrossprod(x, y, encoding));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_VSE_benchmark", (DL_FUNC) &_VSE_benchmark, 3},
    {"_VSE_colsums", (DL_FUNC) &_VSE_colsums, 2},
    {"_VSE_c_inspect", (DL_FUNC) &_VSE_c_inspect, 2},
    {"_VSE_memuse", (DL_FUNC) &_VSE_memuse, 2},
    {"_VSE_tcrossprod", (DL_FUNC) &_VSE_tcrossprod, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_VSE(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
